// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "the-coolest-shuffler/internal/model"

	mock "github.com/stretchr/testify/mock"

	request "the-coolest-shuffler/internal/request"
)

// Shuffler is an autogenerated mock type for the Shuffler type
type Shuffler struct {
	mock.Mock
}

// Create provides a mock function with given fields: deck
func (_m *Shuffler) Create(deck *request.Deck) *model.Deck {
	ret := _m.Called(deck)

	var r0 *model.Deck
	if rf, ok := ret.Get(0).(func(*request.Deck) *model.Deck); ok {
		r0 = rf(deck)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Deck)
		}
	}

	return r0
}

// Show provides a mock function with given fields: deck
func (_m *Shuffler) Show(deck *request.Deck) *model.Deck {
	ret := _m.Called(deck)

	var r0 *model.Deck
	if rf, ok := ret.Get(0).(func(*request.Deck) *model.Deck); ok {
		r0 = rf(deck)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Deck)
		}
	}

	return r0
}

type mockConstructorTestingTNewShuffler interface {
	mock.TestingT
	Cleanup(func())
}

// NewShuffler creates a new instance of Shuffler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewShuffler(t mockConstructorTestingTNewShuffler) *Shuffler {
	mock := &Shuffler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
