// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// Get provides a mock function with given fields: key, target
func (_m *Cache) Get(key uuid.UUID, target interface{}) interface{} {
	ret := _m.Called(key, target)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(uuid.UUID, interface{}) interface{}); ok {
		r0 = rf(key, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Set provides a mock function with given fields: key, target
func (_m *Cache) Set(key uuid.UUID, target interface{}) interface{} {
	ret := _m.Called(key, target)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(uuid.UUID, interface{}) interface{}); ok {
		r0 = rf(key, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

type mockConstructorTestingTNewCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCache(t mockConstructorTestingTNewCache) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
